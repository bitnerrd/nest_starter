import { MailerService } from '@nestjs-modules/mailer';
import { Injectable } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import { RoleEnum, SecurityCodeTypeEnum } from 'src/utils/enums/enums';
import { UserEntity } from 'src/entities/user/user.entity';

@Injectable()
export class MailService {
  constructor(
    private mailerService: MailerService,
    private configService: ConfigService,
  ) { }

  async sendEmail(user: any, type: SecurityCodeTypeEnum, code: string) {
    let domainURL = '';
    let url = '';
    let text = '';
    let subject = ''
    if (user.role === RoleEnum.admin) {
      domainURL = this.configService.get('app.adminPanelDomain')
    }
    else {
      domainURL = this.configService.get('app.frontendDomain')
    }

    if (type === SecurityCodeTypeEnum.verification) {
      subject = "Verify your email on Open-Advisor"
      text = "Please click the url bellow to verify your email"
      url = `${this.configService.get('app.frontendDomain')}/api/v1/auth/verify-email/${code}`;
    }

    if (type === SecurityCodeTypeEnum.forgot) {
      subject = "Reset your password on Open-Advisor"
      text = 'Please click the url bellow to reset your password'
      url = `${domainURL}/change-pass?code=${code}`;
    }

    const logo = `${this.configService.get('app.backendDomain')}/logo/logo.svg`

    return await this.mailerService.sendMail({
      to: user.email,
      // from: '"Support Team" <support@example.com>', // override default from
      subject: subject,
      template: `./${this.templateName(type)}`, // `.hbs` extension is appended automatically
      context: { // ✏️ filling curly brackets with content
        app_name: 'Open Advisor',
        text: text,
        url: url,
        name: `${user.firstName} ${user.lastName}`,
        logo_url: logo
      },
    });
  }

  async sendReply(to: string, name: string, query: string, message: string) {

    const logo = `${this.configService.get('app.backendDomain')}/logo/logo.svg`

    return await this.mailerService.sendMail({
      to: to,
      // from: '"Support Team" <support@example.com>', // override default from
      subject: 'Reply of your query from Open-Advisor',
      template: './support-reply', // `.hbs` extension is appended automatically
      context: { // ✏️ filling curly brackets with content 'if this is not generated by you, please ignore this email.'
        app_name: 'Open Advisor',
        query: query,
        text: message,
        name: `${name}`,
        logo_url: logo
      },
    });
  }

  async sendNewsletter(to: string[], title: string, message: string) {
    let domainURL = ''
    const url = `${domainURL}/support-reply`;

    const logo = `${this.configService.get('app.backendDomain')}/logo/logo.svg`

    return await this.mailerService.sendMail({
      to: to,
      // from: '"Support Team" <support@example.com>', // override default from
      subject: 'Newsletter',
      template: `./newsletter`, // `.hbs` extension is appended automatically
      context: { // ✏️ filling curly brackets with content
        title: title,
        app_name: 'Open Advisor',
        text: message,
        logo_url: logo
      },
    });
  }


  async sendSubAdminDetails(to: string, password: string) {
    let domainURL = ''
    const url = `${domainURL}/support-reply`;
    const logo = `${this.configService.get('app.backendDomain')}/logo/logo.svg`

    return await this.mailerService.sendMail({
      to: to,
      // from: '"Support Team" <support@example.com>', // override default from
      subject: 'Sub-Admin Password',
      template: `./reset-password`, // `.hbs` extension is appended automatically
      context: { // ✏️ filling curly brackets with content
        title: 'Here is your Temporary password as Sub-Admin',
        app_name: 'Open Advisor',
        text: password,
        url: 'www.openadvisor.com',
        name: `Sub-Admin`,
        logo_url: logo
      },
    });
  }

  async sendContactMessageToProfessional(to: string, contactorEmail: string, contactorName: string, message: string) {

    const logo = `${this.configService.get('app.backendDomain')}/logo/logo.svg`

    return await this.mailerService.sendMail({
      to: to,
      cc: contactorEmail,
      // from: '"Support Team" <support@example.com>', // override default from
      subject: 'Contact Email',
      template: `./contact-professional`, // `.hbs` extension is appended automatically
      context: { // ✏️ filling curly brackets with content
        app_name: 'Open Advisor',
        contact_name: contactorName,
        text: message,
        logo_url: logo
      },
    });
  }


  templateName(type: SecurityCodeTypeEnum): string {
    switch (type) {
      case SecurityCodeTypeEnum.forgot:
        return 'reset-password'
      case SecurityCodeTypeEnum.verification:
        return 'verification'
      default:
        return 'verification'
    }
  }
}
